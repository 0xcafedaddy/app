<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:aop="http://www.springframework.org/schema/aop" 
		xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop.xsd">

	 <bean id="TJDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" >
		<property name="driverClassName" value="${jdbc.driverClassName}" /> 
		<property name="url" value="${ychstatistics.jdbc.url}" /> 
		<property name="username" value="${ychstatistics.jdbc.username}" /> 
		<property name="password" value="${ychstatistics.jdbc.password}" /> 
		<!-- 连接池配置 -->

		 <!-- 初始化连接大小 -->
		 <property name="initialSize" value="0"/>
		 <!-- 连接池最大使用连接数量 -->
		 <property name="maxActive" value="20"/>
		 <!-- 连接池最小空闲 -->
		 <property name="minIdle" value="0"/>
		 <!-- 获取连接最大等待时间 -->
		 <property name="maxWait" value="60000"/>

		 <property name="validationQuery" value="${validationQuery}"></property>
		 <property name="testOnBorrow" value="false"/>
		 <property name="testOnReturn" value="false"/>
		 <property name="testWhileIdle" value="true"/>

		 <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		 <property name="timeBetweenEvictionRunsMillis" value="60000"/>
		 <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		 <property name="minEvictableIdleTimeMillis" value="25200000"/>

		 <!-- 打开removeAbandoned功能 -->
		 <property name="removeAbandoned" value="true"/>
		 <!-- 1800秒，也就是30分钟 -->
		 <property name="removeAbandonedTimeout" value="1800"/>
		 <!-- 关闭abanded连接时输出错误日志 -->
		 <property name="logAbandoned" value="true"/>

		 <!-- 监控数据库 -->
		 <property name="filters" value="mergeStat"/>
	</bean>
	
	<!-- sessionFactory 将spring和mybatis整合 -->
	<bean id="sqlSessionFactoryTJ" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="TJDataSource" />
		<property name="mapperLocations" value="classpath:mapper/*.xml" />
		<property name="configLocation" value="classpath:xml/mybatis.xml" />
	</bean>
	<!-- 相当于实现类的@Repository,因为接口不能用@Repository. -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.uflowertv.statistics.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryTJ" />
	</bean>
	
	<!-- 事务 -->
	<bean id="transactionManagerTJ" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="TJDataSource" />
	</bean>
	<!-- 为service添加事务处理 -->
	<tx:advice id="txAdviceTJ" transaction-manager="transactionManagerTJ">
		<tx:attributes>
			<tx:method name="init*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="count*" read-only="true" />
			<tx:method name="list*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="search*" read-only="true" />

			<tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Throwable"></tx:method>
		</tx:attributes>
	</tx:advice>
	<!-- 需要引入aop的命名空间（配置事物的切入点） -->
	<aop:config>
		<!-- 切入点指明了在执行Service的所有方法时产生事务拦截操作 -->
		<aop:pointcut expression="execution(public * com.uflowertv.statistics.service.*.*(..))" id="txPointCutTJ" />
		<!-- 定义了将采用何种拦截操作，这里引用到 txAdvice -->
		<aop:advisor advice-ref="txAdviceTJ" pointcut-ref="txPointCutTJ" />
	</aop:config>
</beans>