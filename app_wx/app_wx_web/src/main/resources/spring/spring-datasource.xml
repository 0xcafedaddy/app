<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:aop="http://www.springframework.org/schema/aop" 
		xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop.xsd">

	 <bean id="dataSource_wx" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" >
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${ychweixin.jdbc.url}" />
		<property name="username" value="${ychweixin.jdbc.username}" />
		<property name="password" value="${ychweixin.jdbc.password}" />
		 <!-- 初始化连接大小 -->
		 <property name="initialSize" value="0"/>
		 <!-- 连接池最大使用连接数量 -->
		 <property name="maxActive" value="20"/>
		 <!-- 连接池最小空闲 -->
		 <property name="minIdle" value="0"/>
		 <!-- 获取连接最大等待时间 -->
		 <property name="maxWait" value="60000"/>

		 <property name="validationQuery" value="${validationQuery}"></property>
		 <property name="testOnBorrow" value="false"/>
		 <property name="testOnReturn" value="false"/>
		 <property name="testWhileIdle" value="true"/>

		 <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		 <property name="timeBetweenEvictionRunsMillis" value="60000"/>
		 <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		 <property name="minEvictableIdleTimeMillis" value="25200000"/>

		 <!-- 打开removeAbandoned功能 -->
		 <property name="removeAbandoned" value="true"/>
		 <!-- 1800秒，也就是30分钟 -->
		 <property name="removeAbandonedTimeout" value="1800"/>
		 <!-- 关闭abanded连接时输出错误日志 -->
		 <property name="logAbandoned" value="true"/>

		 <!-- 监控数据库 -->
		 <property name="filters" value="mergeStat"/>
	</bean>

    <bean id="dataSource_tj" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" >
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${ychstatistics.jdbc.url}" />
        <property name="username" value="${ychstatistics.jdbc.username}" />
        <property name="password" value="${ychstatistics.jdbc.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0"/>
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20"/>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0"/>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000"/>

		<property name="validationQuery" value="${validationQuery}"></property>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>
		<property name="testWhileIdle" value="true"/>

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000"/>
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000"/>

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true"/>
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800"/>
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true"/>

		<!-- 监控数据库 -->
		<property name="filters" value="mergeStat"/>
    </bean>
    <!--动态配置数据源-->
    <bean id="dataSource" class="com.uflowertv.datasources.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="dataSource_wx" value-ref="dataSource_wx" />
                <entry key="dataSource_tj" value-ref="dataSource_tj" />
            </map>
        </property>
        <!-- 默认数据源 -->
        <property name="defaultTargetDataSource" ref="dataSource_wx" />
    </bean>
    <!-- MyBatis SqlSessionFactoryBean 配置 -->
    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:xml/mybatis-config.xml" />
        <property name="typeAliasesPackage" value="com.uflowertv.model.po" />
        <property name="mapperLocations" value="classpath:mapper/*.xml" />
		<property name="plugins">
			<array>
				<!-- 分页插件配置 -->
				<bean id="paginationInterceptor" class="com.baomidou.mybatisplus.plugins.PaginationInterceptor">
					<property name="dialectType" value="mysql"/>
				</bean>
			</array>
		</property>
    </bean>
    <!-- 加载 mapper.xml 接口 配置文件 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.uflowertv.dao" />
    </bean>
    <!-- 事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
    <!-- 为service添加事务处理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="init*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="count*" read-only="true" />
			<tx:method name="list*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="search*" read-only="true" />

			<tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Throwable"></tx:method>
		</tx:attributes>
	</tx:advice>

	<bean id="multipleDataSourceExchange" class="com.uflowertv.datasources.MultipleDataSourceExchange "/>

    <!-- 扫描切面包路径 -->
    <!--<bean id="logAspect" class="com.baomidou.framework.aop.LogAspect"/>-->
    <!-- 需要引入aop的命名空间（配置事物的切入点） -->
	<aop:config>
        <!-- 切入点指明了在执行Service的所有方法时产生事务拦截操作 -->
        <aop:pointcut expression="execution(public * com.uflowertv.service.*.*(..))" id="txPointCut" />
        <!-- 定义了将采用何种拦截操作，这里引用到 txAdvice -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut" order="2"/>
        <!--多数据源动态切换-->
        <aop:aspect ref="multipleDataSourceExchange" order="1">
            <aop:pointcut id="dynmicDataSource" expression="@annotation(com.uflowertv.datasources.DataSourceKey)"/>
            <aop:around method="beforeDaoMethod" pointcut-ref="dynmicDataSource"/>
        </aop:aspect>
	</aop:config>
</beans>